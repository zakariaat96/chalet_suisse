{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\real_estate_project\\\\src\\\\components\\\\ChaletMapEmbed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChaletMapEmbed = ({\n  latitude,\n  longitude,\n  title,\n  address,\n  city,\n  canton\n}) => {\n  _s();\n  const [mapSrc, setMapSrc] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Build the map URL using the same method that works in your example\n    const buildMapUrl = () => {\n      if (latitude && longitude) {\n        // Use coordinates directly - same format as your working example\n        console.log(`Using coordinates for ${title}: ${latitude}, ${longitude}`);\n        // Create a unique iframe URL with actual coordinates\n        const lat = parseFloat(latitude);\n        const lng = parseFloat(longitude);\n\n        // This is the exact format that works, similar to your example\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2000!2d${lng}!3d${lat}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${encodeURIComponent(title)}!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\n      } else if (city) {\n        // Use city search\n        console.log(`Using city for ${title}: ${city}`);\n        const searchQuery = encodeURIComponent(`${city}, Switzerland`);\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${searchQuery}!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\n      } else {\n        // Fallback to Switzerland\n        console.log(`Using fallback for ${title}: Switzerland`);\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d200000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2sSwitzerland!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\n      }\n    };\n\n    // Debug: Let's see what coordinates we're actually getting\n    console.log('=== MAP DEBUG ===');\n    console.log('Title:', title);\n    console.log('Latitude:', latitude, 'Type:', typeof latitude);\n    console.log('Longitude:', longitude, 'Type:', typeof longitude);\n    console.log('City:', city);\n    console.log('Address:', address);\n    console.log('Canton:', canton);\n    const url = buildMapUrl();\n    console.log('Generated URL:', url);\n    setMapSrc(url);\n    setIsLoading(false);\n  }, [latitude, longitude, address, city, canton, title]);\n  const handleIframeLoad = () => {\n    setIsLoading(false);\n  };\n  const handleIframeError = () => {\n    setIsLoading(false);\n    console.error('Failed to load Google Maps');\n  };\n\n  // Build the Google Maps search URL for the \"Open in Maps\" link\n  const buildMapsUrl = () => {\n    if (latitude && longitude) {\n      return `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n    } else if (city) {\n      return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(city + ', Switzerland')}`;\n    } else {\n      return `https://www.google.com/maps/search/?api=1&query=Switzerland`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chalet-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '12px',\n        color: '#666',\n        marginBottom: '10px'\n      },\n      children: [\"Map for: \", title, \" | Coords: \", latitude, \", \", longitude, \" | City: \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Loading map for \", title, \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: mapSrc,\n      width: \"100%\",\n      height: \"300\",\n      style: {\n        border: 0,\n        borderRadius: '12px',\n        display: isLoading ? 'none' : 'block'\n      },\n      allowFullScreen: \"\",\n      loading: \"lazy\",\n      referrerPolicy: \"no-referrer-when-downgrade\",\n      title: `Map showing location of ${title || 'chalet'}`,\n      onLoad: handleIframeLoad,\n      onError: handleIframeError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ChaletMapEmbed, \"B1bEMGh77YjLU2Dp61wAICwYpIc=\");\n_c = ChaletMapEmbed;\nexport default ChaletMapEmbed;\nvar _c;\n$RefreshReg$(_c, \"ChaletMapEmbed\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChaletMapEmbed","latitude","longitude","title","address","city","canton","_s","mapSrc","setMapSrc","isLoading","setIsLoading","buildMapUrl","console","log","lat","parseFloat","lng","encodeURIComponent","Date","now","searchQuery","url","handleIframeLoad","handleIframeError","error","buildMapsUrl","className","children","style","fontSize","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","src","width","height","border","borderRadius","display","allowFullScreen","loading","referrerPolicy","onLoad","onError","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/real_estate_project/src/components/ChaletMapEmbed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChaletMapEmbed = ({ latitude, longitude, title, address, city, canton }) => {\r\n  const [mapSrc, setMapSrc] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Build the map URL using the same method that works in your example\r\n    const buildMapUrl = () => {\r\n      if (latitude && longitude) {\r\n        // Use coordinates directly - same format as your working example\r\n        console.log(`Using coordinates for ${title}: ${latitude}, ${longitude}`);\r\n        // Create a unique iframe URL with actual coordinates\r\n        const lat = parseFloat(latitude);\r\n        const lng = parseFloat(longitude);\r\n        \r\n        // This is the exact format that works, similar to your example\r\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2000!2d${lng}!3d${lat}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${encodeURIComponent(title)}!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\r\n      } else if (city) {\r\n        // Use city search\r\n        console.log(`Using city for ${title}: ${city}`);\r\n        const searchQuery = encodeURIComponent(`${city}, Switzerland`);\r\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${searchQuery}!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\r\n      } else {\r\n        // Fallback to Switzerland\r\n        console.log(`Using fallback for ${title}: Switzerland`);\r\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d200000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2sSwitzerland!5e0!3m2!1sen!2sch!4v${Date.now()}!5m2!1sen!2sch`;\r\n      }\r\n    };\r\n\r\n    // Debug: Let's see what coordinates we're actually getting\r\n    console.log('=== MAP DEBUG ===');\r\n    console.log('Title:', title);\r\n    console.log('Latitude:', latitude, 'Type:', typeof latitude);\r\n    console.log('Longitude:', longitude, 'Type:', typeof longitude);\r\n    console.log('City:', city);\r\n    console.log('Address:', address);\r\n    console.log('Canton:', canton);\r\n\r\n    const url = buildMapUrl();\r\n    console.log('Generated URL:', url);\r\n    setMapSrc(url);\r\n    setIsLoading(false);\r\n  }, [latitude, longitude, address, city, canton, title]);\r\n\r\n  const handleIframeLoad = () => {\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleIframeError = () => {\r\n    setIsLoading(false);\r\n    console.error('Failed to load Google Maps');\r\n  };\r\n\r\n  // Build the Google Maps search URL for the \"Open in Maps\" link\r\n  const buildMapsUrl = () => {\r\n    if (latitude && longitude) {\r\n      return `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\r\n    } else if (city) {\r\n      return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(city + ', Switzerland')}`;\r\n    } else {\r\n      return `https://www.google.com/maps/search/?api=1&query=Switzerland`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chalet-map-container\">\r\n      {/* Debug info - remove this in production */}\r\n      <div style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>\r\n        Map for: {title} | Coords: {latitude}, {longitude} | City: {city}\r\n      </div>\r\n\r\n      {isLoading && (\r\n        <div className=\"map-loading\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Loading map for {title}...</p>\r\n        </div>\r\n      )}\r\n      \r\n      <iframe\r\n        src={mapSrc}\r\n        width=\"100%\"\r\n        height=\"300\"\r\n        style={{\r\n          border: 0,\r\n          borderRadius: '12px',\r\n          display: isLoading ? 'none' : 'block'\r\n        }}\r\n        allowFullScreen=\"\"\r\n        loading=\"lazy\"\r\n        referrerPolicy=\"no-referrer-when-downgrade\"\r\n        title={`Map showing location of ${title || 'chalet'}`}\r\n        onLoad={handleIframeLoad}\r\n        onError={handleIframeError}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChaletMapEmbed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}