{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\real_estate_project\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// contexts/AuthContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Session sync function - NEW\n  const syncSession = async () => {\n    if (!user) return; // Only sync if user thinks they're logged in\n\n    try {\n      const response = await fetch('${process.env.REACT_APP_API_BASE_URL}/check_session_status.php', {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n\n      // If frontend thinks user is logged in but backend session expired\n      if (user && !data.logged_in) {\n        console.log('Backend session expired, logging out...');\n        localStorage.removeItem('user');\n        localStorage.removeItem('favorites');\n        setUser(null);\n        // Don't navigate to login, just clear the session\n      }\n\n      // If backend has session but frontend doesn't have complete user data\n      if (data.logged_in && (!user || !user.id)) {\n        console.log('Syncing user data from backend session...');\n        const syncedUser = {\n          id: data.user_id,\n          email: data.email,\n          is_admin: data.is_admin,\n          name: data.name\n        };\n        localStorage.setItem('user', JSON.stringify(syncedUser));\n        setUser(syncedUser);\n      }\n    } catch (error) {\n      console.log('Session sync failed (this is normal if not logged in):', error);\n    }\n  };\n  useEffect(() => {\n    // Check for user in localStorage - UNCHANGED\n    const storedUser = JSON.parse(localStorage.getItem('user') || 'null');\n    setUser(storedUser);\n    setLoading(false);\n\n    // NEW: Sync with backend session after loading from localStorage\n    if (storedUser) {\n      setTimeout(syncSession, 100); // Small delay to ensure everything is loaded\n    }\n  }, []);\n\n  // NEW: Periodic session check every 5 minutes (only if user is logged in)\n  useEffect(() => {\n    if (!user) return;\n    const interval = setInterval(syncSession, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [user]);\n\n  // NEW: Check session when user comes back to the tab\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden && user) {\n        syncSession();\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, [user]);\n\n  // Login function - UNCHANGED\n  const login = userData => {\n    localStorage.setItem('user', JSON.stringify(userData));\n    setUser(userData);\n\n    // Redirect based on user type\n    if (userData.is_admin) {\n      navigate('/admin-dashboard');\n    } else {\n      navigate('/user-dashboard');\n    }\n  };\n\n  // Logout function - ENHANCED\n  const logout = async () => {\n    // NEW: Call backend logout to destroy server session\n    try {\n      await fetch('${process.env.REACT_APP_API_BASE_URL}/logout.php', {\n        method: 'POST',\n        credentials: 'include'\n      });\n    } catch (error) {\n      console.log('Backend logout failed (this is usually fine):', error);\n    }\n\n    // Original logout logic - UNCHANGED\n    localStorage.removeItem('user');\n    localStorage.removeItem('favorites'); // NEW: Also clear favorites\n    setUser(null);\n    navigate('/login');\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    syncSession,\n    // NEW: Expose sync function\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.is_admin) || false,\n    isUser: !!user && !user.is_admin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+06iQ4HXQ4IQuS4MRc73Tq+19ys=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","navigate","syncSession","response","fetch","method","credentials","headers","data","json","logged_in","console","log","localStorage","removeItem","id","syncedUser","user_id","email","is_admin","name","setItem","JSON","stringify","error","storedUser","parse","getItem","setTimeout","interval","setInterval","clearInterval","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","login","userData","logout","value","isAuthenticated","isAdmin","isUser","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/real_estate_project/src/contexts/AuthContext.js"],"sourcesContent":["// contexts/AuthContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Session sync function - NEW\r\n  const syncSession = async () => {\r\n    if (!user) return; // Only sync if user thinks they're logged in\r\n    \r\n    try {\r\n      const response = await fetch('${process.env.REACT_APP_API_BASE_URL}/check_session_status.php', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      // If frontend thinks user is logged in but backend session expired\r\n      if (user && !data.logged_in) {\r\n        console.log('Backend session expired, logging out...');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('favorites');\r\n        setUser(null);\r\n        // Don't navigate to login, just clear the session\r\n      }\r\n      \r\n      // If backend has session but frontend doesn't have complete user data\r\n      if (data.logged_in && (!user || !user.id)) {\r\n        console.log('Syncing user data from backend session...');\r\n        const syncedUser = {\r\n          id: data.user_id,\r\n          email: data.email,\r\n          is_admin: data.is_admin,\r\n          name: data.name\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(syncedUser));\r\n        setUser(syncedUser);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log('Session sync failed (this is normal if not logged in):', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check for user in localStorage - UNCHANGED\r\n    const storedUser = JSON.parse(localStorage.getItem('user') || 'null');\r\n    setUser(storedUser);\r\n    setLoading(false);\r\n    \r\n    // NEW: Sync with backend session after loading from localStorage\r\n    if (storedUser) {\r\n      setTimeout(syncSession, 100); // Small delay to ensure everything is loaded\r\n    }\r\n  }, []);\r\n\r\n  // NEW: Periodic session check every 5 minutes (only if user is logged in)\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    \r\n    const interval = setInterval(syncSession, 5 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, [user]);\r\n\r\n  // NEW: Check session when user comes back to the tab\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (!document.hidden && user) {\r\n        syncSession();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, [user]);\r\n\r\n  // Login function - UNCHANGED\r\n  const login = (userData) => {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    setUser(userData);\r\n    \r\n    // Redirect based on user type\r\n    if (userData.is_admin) {\r\n      navigate('/admin-dashboard');\r\n    } else {\r\n      navigate('/user-dashboard');\r\n    }\r\n  };\r\n\r\n  // Logout function - ENHANCED\r\n  const logout = async () => {\r\n    // NEW: Call backend logout to destroy server session\r\n    try {\r\n      await fetch('${process.env.REACT_APP_API_BASE_URL}/logout.php', {\r\n        method: 'POST',\r\n        credentials: 'include'\r\n      });\r\n    } catch (error) {\r\n      console.log('Backend logout failed (this is usually fine):', error);\r\n    }\r\n    \r\n    // Original logout logic - UNCHANGED\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('favorites'); // NEW: Also clear favorites\r\n    setUser(null);\r\n    navigate('/login');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    syncSession, // NEW: Expose sync function\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.is_admin || false,\r\n    isUser: !!user && !user.is_admin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMgB,QAAQ,GAAGb,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACL,IAAI,EAAE,OAAO,CAAC;;IAEnB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,EAAE;QAC7FC,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE,SAAS;QACtBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIZ,IAAI,IAAI,CAACW,IAAI,CAACE,SAAS,EAAE;QAC3BC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtDC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;QAC/BD,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;QACpChB,OAAO,CAAC,IAAI,CAAC;QACb;MACF;;MAEA;MACA,IAAIU,IAAI,CAACE,SAAS,KAAK,CAACb,IAAI,IAAI,CAACA,IAAI,CAACkB,EAAE,CAAC,EAAE;QACzCJ,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QACxD,MAAMI,UAAU,GAAG;UACjBD,EAAE,EAAEP,IAAI,CAACS,OAAO;UAChBC,KAAK,EAAEV,IAAI,CAACU,KAAK;UACjBC,QAAQ,EAAEX,IAAI,CAACW,QAAQ;UACvBC,IAAI,EAAEZ,IAAI,CAACY;QACb,CAAC;QACDP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,UAAU,CAAC,CAAC;QACxDlB,OAAO,CAACkB,UAAU,CAAC;MACrB;IAEF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdb,OAAO,CAACC,GAAG,CAAC,wDAAwD,EAAEY,KAAK,CAAC;IAC9E;EACF,CAAC;EAEDtC,SAAS,CAAC,MAAM;IACd;IACA,MAAMuC,UAAU,GAAGH,IAAI,CAACI,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;IACrE7B,OAAO,CAAC2B,UAAU,CAAC;IACnBzB,UAAU,CAAC,KAAK,CAAC;;IAEjB;IACA,IAAIyB,UAAU,EAAE;MACdG,UAAU,CAAC1B,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,IAAI,EAAE;IAEX,MAAMgC,QAAQ,GAAGC,WAAW,CAAC5B,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACxD,OAAO,MAAM6B,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAChC,IAAI,CAAC,CAAC;;EAEV;EACAX,SAAS,CAAC,MAAM;IACd,MAAM8C,sBAAsB,GAAGA,CAAA,KAAM;MACnC,IAAI,CAACC,QAAQ,CAACC,MAAM,IAAIrC,IAAI,EAAE;QAC5BK,WAAW,CAAC,CAAC;MACf;IACF,CAAC;IAED+B,QAAQ,CAACE,gBAAgB,CAAC,kBAAkB,EAAEH,sBAAsB,CAAC;IACrE,OAAO,MAAMC,QAAQ,CAACG,mBAAmB,CAAC,kBAAkB,EAAEJ,sBAAsB,CAAC;EACvF,CAAC,EAAE,CAACnC,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMwC,KAAK,GAAIC,QAAQ,IAAK;IAC1BzB,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACe,QAAQ,CAAC,CAAC;IACtDxC,OAAO,CAACwC,QAAQ,CAAC;;IAEjB;IACA,IAAIA,QAAQ,CAACnB,QAAQ,EAAE;MACrBlB,QAAQ,CAAC,kBAAkB,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAAC,iBAAiB,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAMsC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB;IACA,IAAI;MACF,MAAMnC,KAAK,CAAC,kDAAkD,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdb,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEY,KAAK,CAAC;IACrE;;IAEA;IACAX,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/BD,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtChB,OAAO,CAAC,IAAI,CAAC;IACbG,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMuC,KAAK,GAAG;IACZ3C,IAAI;IACJE,OAAO;IACPsC,KAAK;IACLE,MAAM;IACNrC,WAAW;IAAE;IACbuC,eAAe,EAAE,CAAC,CAAC5C,IAAI;IACvB6C,OAAO,EAAE,CAAA7C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,QAAQ,KAAI,KAAK;IAChCwB,MAAM,EAAE,CAAC,CAAC9C,IAAI,IAAI,CAACA,IAAI,CAACsB;EAC1B,CAAC;EAED,oBACE7B,OAAA,CAACC,WAAW,CAACqD,QAAQ;IAACJ,KAAK,EAAEA,KAAM;IAAA7C,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACpD,GAAA,CA/HWF,YAAY;EAAA,QAGNN,WAAW;AAAA;AAAA6D,EAAA,GAHjBvD,YAAY;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}