{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\real_estate_project\\\\src\\\\components\\\\ChaletMapEmbed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChaletMapEmbed = ({\n  latitude,\n  longitude,\n  title,\n  address,\n  city,\n  canton\n}) => {\n  _s();\n  const [mapSrc, setMapSrc] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Build the Google Maps Embed URL\n    const buildMapUrl = () => {\n      const baseUrl = 'https://www.google.com/maps/embed/v1/place';\n\n      // If we have coordinates, use them\n      if (latitude && longitude) {\n        const query = `${latitude},${longitude}`;\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d${longitude}!3d${latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zM!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\n      }\n\n      // If no coordinates, use address search\n      if (address && city) {\n        const searchQuery = encodeURIComponent(`${address}, ${city}, ${canton || 'Switzerland'}`);\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d8.0!3d46.0!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z${searchQuery}!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\n      }\n\n      // Fallback to city search\n      const cityQuery = encodeURIComponent(`${city}, ${canton || 'Switzerland'}`);\n      return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d8.0!3d46.0!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z${cityQuery}!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\n    };\n\n    // Alternative simpler method using the search parameter\n    const buildSimpleMapUrl = () => {\n      let query = '';\n      if (latitude && longitude) {\n        // Use coordinates directly\n        query = `${latitude},${longitude}`;\n      } else if (address && city) {\n        // Use full address\n        query = `${address}, ${city}, ${canton || 'Switzerland'}`;\n      } else {\n        // Use city only\n        query = `${city}, ${canton || 'Switzerland'}`;\n      }\n      const encodedQuery = encodeURIComponent(query);\n      return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${encodedQuery}!5e0!3m2!1sen!2s!4v${Date.now()}!5m2!1sen!2s`;\n    };\n    const url = buildSimpleMapUrl();\n    setMapSrc(url);\n    setIsLoading(false);\n  }, [latitude, longitude, address, city, canton]);\n  const handleIframeLoad = () => {\n    setIsLoading(false);\n  };\n  const handleIframeError = () => {\n    setIsLoading(false);\n    console.error('Failed to load Google Maps');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chalet-map-container\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: mapSrc,\n      width: \"100%\",\n      height: \"300\",\n      style: {\n        border: 0,\n        borderRadius: '12px',\n        display: isLoading ? 'none' : 'block'\n      },\n      allowFullScreen: \"\",\n      loading: \"lazy\",\n      referrerPolicy: \"no-referrer-when-downgrade\",\n      title: `Map showing location of ${title}`,\n      onLoad: handleIframeLoad,\n      onError: handleIframeError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-link\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(latitude && longitude ? `${latitude},${longitude}` : `${address || ''} ${city} ${canton || 'Switzerland'}`)}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"open-maps-link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ChaletMapEmbed, \"B1bEMGh77YjLU2Dp61wAICwYpIc=\");\n_c = ChaletMapEmbed;\nexport default ChaletMapEmbed;\nvar _c;\n$RefreshReg$(_c, \"ChaletMapEmbed\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChaletMapEmbed","latitude","longitude","title","address","city","canton","_s","mapSrc","setMapSrc","isLoading","setIsLoading","buildMapUrl","baseUrl","query","searchQuery","encodeURIComponent","cityQuery","buildSimpleMapUrl","encodedQuery","Date","now","url","handleIframeLoad","handleIframeError","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","width","height","style","border","borderRadius","display","allowFullScreen","loading","referrerPolicy","onLoad","onError","href","target","rel","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/real_estate_project/src/components/ChaletMapEmbed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChaletMapEmbed = ({ latitude, longitude, title, address, city, canton }) => {\r\n  const [mapSrc, setMapSrc] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Build the Google Maps Embed URL\r\n    const buildMapUrl = () => {\r\n      const baseUrl = 'https://www.google.com/maps/embed/v1/place';\r\n      \r\n      // If we have coordinates, use them\r\n      if (latitude && longitude) {\r\n        const query = `${latitude},${longitude}`;\r\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d${longitude}!3d${latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zM!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\r\n      }\r\n      \r\n      // If no coordinates, use address search\r\n      if (address && city) {\r\n        const searchQuery = encodeURIComponent(`${address}, ${city}, ${canton || 'Switzerland'}`);\r\n        return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d8.0!3d46.0!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z${searchQuery}!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\r\n      }\r\n      \r\n      // Fallback to city search\r\n      const cityQuery = encodeURIComponent(`${city}, ${canton || 'Switzerland'}`);\r\n      return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d8.0!3d46.0!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z${cityQuery}!5e0!3m2!1sen!2s!4v1600000000000!5m2!1sen!2s`;\r\n    };\r\n\r\n    // Alternative simpler method using the search parameter\r\n    const buildSimpleMapUrl = () => {\r\n      let query = '';\r\n      \r\n      if (latitude && longitude) {\r\n        // Use coordinates directly\r\n        query = `${latitude},${longitude}`;\r\n      } else if (address && city) {\r\n        // Use full address\r\n        query = `${address}, ${city}, ${canton || 'Switzerland'}`;\r\n      } else {\r\n        // Use city only\r\n        query = `${city}, ${canton || 'Switzerland'}`;\r\n      }\r\n      \r\n      const encodedQuery = encodeURIComponent(query);\r\n      return `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50000!2d8.2275!3d46.8182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2s${encodedQuery}!5e0!3m2!1sen!2s!4v${Date.now()}!5m2!1sen!2s`;\r\n    };\r\n\r\n    const url = buildSimpleMapUrl();\r\n    setMapSrc(url);\r\n    setIsLoading(false);\r\n  }, [latitude, longitude, address, city, canton]);\r\n\r\n  const handleIframeLoad = () => {\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleIframeError = () => {\r\n    setIsLoading(false);\r\n    console.error('Failed to load Google Maps');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chalet-map-container\">\r\n      {isLoading && (\r\n        <div className=\"map-loading\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Loading map...</p>\r\n        </div>\r\n      )}\r\n      \r\n      <iframe\r\n        src={mapSrc}\r\n        width=\"100%\"\r\n        height=\"300\"\r\n        style={{\r\n          border: 0,\r\n          borderRadius: '12px',\r\n          display: isLoading ? 'none' : 'block'\r\n        }}\r\n        allowFullScreen=\"\"\r\n        loading=\"lazy\"\r\n        referrerPolicy=\"no-referrer-when-downgrade\"\r\n        title={`Map showing location of ${title}`}\r\n        onLoad={handleIframeLoad}\r\n        onError={handleIframeError}\r\n      />\r\n      \r\n      {/* Fallback link to open in Google Maps */}\r\n      <div className=\"map-link\">\r\n        <a\r\n          href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\r\n            latitude && longitude \r\n              ? `${latitude},${longitude}` \r\n              : `${address || ''} ${city} ${canton || 'Switzerland'}`\r\n          )}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"open-maps-link\"\r\n        >\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChaletMapEmbed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}