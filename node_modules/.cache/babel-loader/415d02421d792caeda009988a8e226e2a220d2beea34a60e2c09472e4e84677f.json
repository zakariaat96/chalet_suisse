{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n  setError('');\n  setIsLoading(true);\n  try {\n    console.log('Attempting login with:', {\n      email,\n      password\n    });\n    console.log('Request URL:', 'http://localhost/real_estate_project/api/login.php');\n    const response = await fetch('http://localhost/real_estate_project/api/login.php', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      credentials: 'include'\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', [...response.headers.entries()]);\n\n    // Try to get the response text first, then parse as JSON if possible\n    const responseText = await response.text();\n    console.log('Raw response:', responseText);\n    let data;\n    try {\n      data = JSON.parse(responseText);\n      console.log('Parsed response:', data);\n    } catch (parseError) {\n      console.error('JSON parse error:', parseError);\n      throw new Error('Invalid response format');\n    }\n    if (data.success) {\n      // Store auth data in localStorage for client-side checks\n      localStorage.setItem('isAuthenticated', 'true');\n      localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\n      localStorage.setItem('userId', data.user_id);\n\n      // Redirect based on user type\n      navigate(data.is_admin ? '/dashboard' : '/');\n    } else {\n      setError(data.error || 'Invalid credentials');\n    }\n  } catch (err) {\n    console.error('Login error details:', err);\n    setError('Connection error. Please try again.');\n  } finally {\n    setIsLoading(false);\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","setError","setIsLoading","console","log","email","password","response","fetch","method","headers","body","JSON","stringify","credentials","status","entries","responseText","text","data","parse","parseError","error","Error","success","localStorage","setItem","is_admin","user_id","navigate","err"],"sources":["C:/xampp/htdocs/real_estate_project/src/pages/Login.js"],"sourcesContent":["const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setError('');\r\n  setIsLoading(true);\r\n  \r\n  try {\r\n    console.log('Attempting login with:', { email, password });\r\n    console.log('Request URL:', 'http://localhost/real_estate_project/api/login.php');\r\n    \r\n    const response = await fetch(\r\n      'http://localhost/real_estate_project/api/login.php',\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n        credentials: 'include'\r\n      }\r\n    );\r\n\r\n    console.log('Response status:', response.status);\r\n    console.log('Response headers:', [...response.headers.entries()]);\r\n    \r\n    // Try to get the response text first, then parse as JSON if possible\r\n    const responseText = await response.text();\r\n    console.log('Raw response:', responseText);\r\n    \r\n    let data;\r\n    try {\r\n      data = JSON.parse(responseText);\r\n      console.log('Parsed response:', data);\r\n    } catch (parseError) {\r\n      console.error('JSON parse error:', parseError);\r\n      throw new Error('Invalid response format');\r\n    }\r\n\r\n    if (data.success) {\r\n      // Store auth data in localStorage for client-side checks\r\n      localStorage.setItem('isAuthenticated', 'true');\r\n      localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\r\n      localStorage.setItem('userId', data.user_id);\r\n      \r\n      // Redirect based on user type\r\n      navigate(data.is_admin ? '/dashboard' : '/');\r\n    } else {\r\n      setError(data.error || 'Invalid credentials');\r\n    }\r\n  } catch (err) {\r\n    console.error('Login error details:', err);\r\n    setError('Connection error. Please try again.');\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClBC,QAAQ,CAAC,EAAE,CAAC;EACZC,YAAY,CAAC,IAAI,CAAC;EAElB,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC1DH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,oDAAoD,CAAC;IAEjF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oDAAoD,EACpD;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC;MACzCQ,WAAW,EAAE;IACf,CACF,CAAC;IAEDX,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAACQ,MAAM,CAAC;IAChDZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,CAAC,GAAGG,QAAQ,CAACG,OAAO,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEjE;IACA,MAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC1Cf,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEa,YAAY,CAAC;IAE1C,IAAIE,IAAI;IACR,IAAI;MACFA,IAAI,GAAGP,IAAI,CAACQ,KAAK,CAACH,YAAY,CAAC;MAC/Bd,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEe,IAAI,CAAC;IACvC,CAAC,CAAC,OAAOE,UAAU,EAAE;MACnBlB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,EAAED,UAAU,CAAC;MAC9C,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,IAAIJ,IAAI,CAACK,OAAO,EAAE;MAChB;MACAC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;MAC/CD,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEP,IAAI,CAACQ,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;MACjEF,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEP,IAAI,CAACS,OAAO,CAAC;;MAE5C;MACAC,QAAQ,CAACV,IAAI,CAACQ,QAAQ,GAAG,YAAY,GAAG,GAAG,CAAC;IAC9C,CAAC,MAAM;MACL1B,QAAQ,CAACkB,IAAI,CAACG,KAAK,IAAI,qBAAqB,CAAC;IAC/C;EACF,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZ3B,OAAO,CAACmB,KAAK,CAAC,sBAAsB,EAAEQ,GAAG,CAAC;IAC1C7B,QAAQ,CAAC,qCAAqC,CAAC;EACjD,CAAC,SAAS;IACRC,YAAY,CAAC,KAAK,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}